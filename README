php-router README

The Router class is designed to map url's to controller::action methods in your
MVC framework. It is not in itself a framework. To use it, you will need to create
a index/bootstrap file and configure apache to route requests there. Included is
a sample.htaccess file which you can copy into your apache public directory
along with your index/bootstrap file.

Installation
============
1. Copy Router.php to some place accessible by your framwork and include it.
2. Create your routes for your controller/actions (see the 'Adding Routes'
   section below).
3. Create your index.php file and call any desired Router methods.
4. Tell apache to route requests through index.php (see sample.htaccess).
5. Call Router::mapUrlRequest at the end of your index.php file.

Explanation of how routing behaves
==================================
The route path is a string specified with no preceding slash and can contain
static and dynamic elements. Dynamic elements are defined with ":" + name
(':dynamic'). They must have corresponding array keys in the args array. The
dynamic args keys can match anything (NULL) or strings which may be regular
expressions ( '/<regexp>/'). Static elements are defined without the ":".

So, given the following url: "/foo/bar/908"

this path will be matched: 'foo/bar/:id'

and will be mapped to: array(
    'controller' => 'foo',
    'action'     => 'bar',
    'args'       => array(':id' => NULL)
)
where, in this case, id can be anything. The result will be to execute
foo::bar( array(':id' => 908) ).

Notice that the controller::method is passed an array as the argument. Your
controller classes should be written to accept this array.

Dynamic elements
================
Dynamic element values can be either NULL, which will match anything or a string
which represents a regular expression. The regulare expression is evaluated using
php's preg_match function. So any valid regex will work. Some common regex's:
'/^[0-9]+$/'    : must be a number
'/^[0-9]4$/'    : must be a 4 digit number
'/^abc[0-9]+$/' : must be a string begining with 'abc' and ending in numbers

Adding routes
=============
You can add routes all at once by using the Router::autoLoadRoutes method. By
default, the Router class will look for routes located in '../config/routes.php'
ONLY when calling the Router::autoLoadRoutes method. You can change the location
of the routes file by passing a new path when calling the Router::autoLoadRoutes
method.

The other method of adding routes is to use the Router::addRoute method. For
example:
try {
    Router::addRoute('/my/path/:year/:id', array(
        'controller' => 'controllerclass',
        'action' => 'controllerMethod',
        'args' => array(':year' => '/^[0-9]4$/', ':id' => '/^[0-9]+$/');

    Router::addRoute('/my/other/path/:id', array(
        'controller' => 'controllerClass',
        'action' => 'controllerMethod',
        'args' => array(':id' => NULL);
    //etc
} catch (Exception $e) {
    echo $e->getMessage();
}
Note that the Router::addRoute throws an Exception if the 'controller', 'action'
and 'args' keys are not present in the second argument. Even if you are creating
a static map with no dynamic elements, the args key must contain an empty array.

The 'args' array must contain keys which correspond to the dynamic elements of
the path.

Sample routes.php
=================
The routes file (if you use one) must contain an array stored in a variable
named "$routes" and should be in the format:

<?php
$routes = array(
    'foo/bar/:id' => array(
        'controller' => 'foo',
        'action'     => 'bar',
        //This map will match id's that contain numbers only
        'args'       => array(':id' => '/^[0-9]+$/')
    ),
    //You may define a catch all map. It should go last in the array.
    ':controller/:action/:id' => array(
        'controller' => ':controller',
        'action'     => ':action',
        'args'       => array(':controller' => NULL, ':action' => NULL, ':id' => NULL)
    )
);
?>

Basic index.php Example
=======================
include('Router.php');

class foo
{
    public function bar( $args )
    {
        echo $args[':id'];
    }
}

try {
    Router::addRoute('foo/bar/:id', array(
        'controller' => 'foo',
        'action'     => 'bar',
        'args'       => array(':id' => NULL)
    ));
} catch (Exception $e) {
    echo $e;
}

Router::mapUrlRequest();

Example using routes.php file
=============================
include('Router.php');

//Specify the location of the routes.php file
Router::autoLoadRoutes( '/path/to/your/routes.php' );

Router::mapUrlRequest();

The default dispatcher
======================
The default dispatcher will call your controller::action statically. If you
want different behavior (such as creating an instance of the controller), define
your own dispatcher and set it using the Router::setDispatcher method described
below.

Defining your own dispatcher
============================
By default, the Router::dispatch method is called by Router::matchMap whenever
a match is found. You can define your own dispatch class and tell the Router
class to use that class or an instance of that class instead.

For example:
class customDispatcher
{
    /**
     * string $controller
     * string $action
     * array $args
     */
    public function dispatch( $controller, $action, $args )
    {
        //Your own code to dispatch the request

        //The dispatch method MUST return TRUE if the controller::method was
        // found, FALSE if not found.
        return TRUE;
    }
}

Router::autoLoadRoutes( '/path/to/your/routes.php' );

//You can use the class statically...
Router::setDispatcher( 'customDispatcher', 'dispatch' );

//OR use an instace of the class:
$custom_dispatcher = new customDispatcher();
Router::setDispatcher( $custom_dispatcher, 'dispatch' );

Router::mapUrlRequest();

Class auto loader
=================
A method, Router::enableClassAutoLoader, is provided. This will automatically
load your controller class during dispatch and prevent you from having to
include or require in your controller class files as long as: 1) the file name
matches the class name (i.e. mycontroller class name, mycontroller.php file
name); 2) the controller class directory is in the includes path.

Just make sure to call Router::enableClassAutoLoader before Router::mapUrlRequest.

